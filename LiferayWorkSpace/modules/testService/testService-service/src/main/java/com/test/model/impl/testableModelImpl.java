/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.test.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.test.model.testable;
import com.test.model.testableModel;
import com.test.model.testableSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the testable service. Represents a row in the &quot;testable&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link testableModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link testableImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see testableImpl
 * @see testable
 * @see testableModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class testableModelImpl extends BaseModelImpl<testable>
	implements testableModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a testable model instance should use the {@link testable} interface instead.
	 */
	public static final String TABLE_NAME = "testable";
	public static final Object[][] TABLE_COLUMNS = {
			{ "aid", Types.INTEGER },
			{ "aname", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("aid", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("aname", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table testable (aid INTEGER not null primary key,aname VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table testable";
	public static final String ORDER_BY_JPQL = " ORDER BY testable.aid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY testable.aid ASC";
	public static final String DATA_SOURCE = "secondDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.test.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.test.model.testable"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.test.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.test.model.testable"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static testable toModel(testableSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		testable model = new testableImpl();

		model.setAid(soapModel.getAid());
		model.setAname(soapModel.getAname());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<testable> toModels(testableSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<testable> models = new ArrayList<testable>(soapModels.length);

		for (testableSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.test.service.util.ServiceProps.get(
				"lock.expiration.time.com.test.model.testable"));

	public testableModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _aid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setAid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _aid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return testable.class;
	}

	@Override
	public String getModelClassName() {
		return testable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("aid", getAid());
		attributes.put("aname", getAname());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer aid = (Integer)attributes.get("aid");

		if (aid != null) {
			setAid(aid);
		}

		String aname = (String)attributes.get("aname");

		if (aname != null) {
			setAname(aname);
		}
	}

	@JSON
	@Override
	public int getAid() {
		return _aid;
	}

	@Override
	public void setAid(int aid) {
		_aid = aid;
	}

	@JSON
	@Override
	public String getAname() {
		if (_aname == null) {
			return StringPool.BLANK;
		}
		else {
			return _aname;
		}
	}

	@Override
	public void setAname(String aname) {
		_aname = aname;
	}

	@Override
	public testable toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (testable)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		testableImpl testableImpl = new testableImpl();

		testableImpl.setAid(getAid());
		testableImpl.setAname(getAname());

		testableImpl.resetOriginalValues();

		return testableImpl;
	}

	@Override
	public int compareTo(testable testable) {
		int primaryKey = testable.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof testable)) {
			return false;
		}

		testable testable = (testable)obj;

		int primaryKey = testable.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<testable> toCacheModel() {
		testableCacheModel testableCacheModel = new testableCacheModel();

		testableCacheModel.aid = getAid();

		testableCacheModel.aname = getAname();

		String aname = testableCacheModel.aname;

		if ((aname != null) && (aname.length() == 0)) {
			testableCacheModel.aname = null;
		}

		return testableCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{aid=");
		sb.append(getAid());
		sb.append(", aname=");
		sb.append(getAname());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.test.model.testable");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>aid</column-name><column-value><![CDATA[");
		sb.append(getAid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>aname</column-name><column-value><![CDATA[");
		sb.append(getAname());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = testable.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			testable.class
		};
	private int _aid;
	private String _aname;
	private testable _escapedModel;
}